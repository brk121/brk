from django.shortcuts import render
from django.http import HttpResponse
from django.shortcuts import redirect
from django.contrib import messages
from django.views.generic.list import ListView
from django.views.generic.detail import DetailView
from django.views.generic.edit import CreateView, UpdateView, DeleteView, FormView
from django.urls import reverse_lazy
from django.contrib.auth.views import LoginView, LogoutView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import login
from django import forms
from .forms import NewUserForm
import random
from django.contrib.auth import authenticate, login
from .models import BriansclubAddress,SiteConfiguration

from django.contrib.auth.decorators import login_required






# dashboard view

def dashboard(request):
    return render(request, 'main/dashboard.html')


    
def loginPage(requst):
    if requst.method == 'POST':
        username = requst.POST.get('username')
        password = requst.POST.get('password')
        user = authenticate(requst, username=username, password=password)
        if user is not None:
            login(requst, user)
            return redirect('tasklist')
        else:
            messages.info(requst, 'Username or Password is incorrect')


#custom login view

class CustomLoginView(LoginView):
    template_name = 'main/login.html'
    fields = '__all__'
    redirect_authenticated_user = True

    def get_success_url(self):
        return reverse_lazy('dashboard')

# change string to nubmer example '3+1' to 4 in python 

#logout view

def loginreq(request):
        arr =['download_4.png','download_4']
        objnew = {
            'download_4':'3+1',
            'download_11':'5+6'
        }
        images ={
            'download_4':'3+1',
        }
        capatcha = random.choice(arr) # import random and use random.choice
        if request.method == 'POST':
            capatchauser = request.POST.get('captcha')
            username = request.POST.get('username')
            password = request.POST.get('password')
            user = authenticate(request, username=username, password=password)
            if capatcha == capatcha:
                if user is not None:
                    login(request, user)
                    return redirect('dashboard')
                
            else:
                return redirect('login')
        return render(request, 'main/login.html',{'capatcha':capatcha , 'arr':arr, 'objnew':objnew, 'images':images})
class CustomLogoutView(LogoutView):
    template_name = 'main/logout.html'
    next_page = 'login'

    

#register page
class RegisterPage(FormView):
    template_name = 'main/register.html'
    alt_pass= forms.CharField(widget=forms.PasswordInput)
    name = forms.CharField(error_messages={'required':'Enter your name'})

    fields = ("username", "email", "password1", "password2", "alt_pass")

    form_class = UserCreationForm
    redirect_authenticated_user = True
    success_url = reverse_lazy('tasklist')

    def form_valid(self, form):
        user = form.save() # type: ignore
        if user is not None:
            login(self.request, user)
        return super(RegisterPage, self).form_valid(form)
    
    def get(self, *args, **kwargs):
        if self.request.user.is_authenticated:
            return redirect('tasklist')
        return super(RegisterPage, self).get(*args, **kwargs)
    


# task list class
def logincus(request):
    if request.method == 'POST':
       username = request.POST.get('username')
       password = request.POST.get('password')
       return redirect('tasklist')
    else:
        return render(request, 'main/login.html')
        

@login_required

def address_list(request):
       address = BriansclubAddress.objects.first()
       return render(request, 'main/task_list.html', {'address': address})
    








